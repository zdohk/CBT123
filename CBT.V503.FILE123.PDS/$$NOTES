*------------------------------------------------------------------*
*  THE ECHOADF PROGRAM IS ALMOST AS SIMPLE AS IEFBR14.
*   (But it is not practical to use.  Use ECHOPGM rather.)
*
*  It is better to use the ECHOPGM program instead of any others
*  that are in this file.
*
*  THIS SYSTEM WAS INVENTED IN 1986 BY JEFFREY R. BROIDO.
*
* ---------------------------------------------------------------- *
*  Description of the Setup (using the ECHOPGM program).
*
*  The problem for which this system was invented is as follows:
*
*   Users were given a TSO application which ran under the APL
*   programming language and which issued TSO commands under the
*   covers.  You could not see the TSO commands being executed, on
*   screen.  The administrators of this system wanted to log which
*   TSO commands were issued by the APL application, and they also
*   wanted to restrict the users to invoking only those TSO commands
*   that were necessary for the session to run, and no others.
*
*   The application was a PMF (Print Management Facility) application
*   to create fonts, and other Print Management Facility objects,
*   which are used by "extended function printing".
*
*   The application was created by IBM, which sort of explains why
*   they used APL as the programming language.  Nobody else (in
*   their right mind) would do that.  IBM was trying (in the mid
*   80's) to push APL applications, and they had programmers who
*   were trained to use APL.
*
*      What did we do, to use this ECHOPGM program to help?
*
*   Our program, which echoes its name and all the parameters
*   that were entered afterward, can be aliased, in a STEPLIB,
*   to ALL TSO commands that will be forbidden to the users.
*   That will also have the effect of showing us which TSO commands
*   have actually been executed by the APL application under the
*   covers.  It works as follows:
*
*   When one of these aliases is invoked, it issues the ECHOPGM
*   command under its alias name, and the alias name with all
*   the parameters, are reflected right back to the terminal.
*   This terminal response can be logged, and we can find out
*   what is going on, under the covers, in the application.
*
*      How do you set this system up?
*
*   You can deploy this system by copying ECHOPGM to a load
*   library and aliasing it to every TSO command that you have in
*   house.  You STEPLIB that library in a special TSO logon proc
*   that the users will use, and you try to LOGON with that proc,
*   keeping a different (more powerful) userid open in another
*   TSO session.  As you LOGON, you'll see which TSO commands are
*   reflected back to the terminal.  You delete those aliases of
*   ECHOPGM using the regular TSO id, and then you proceed further
*   into the new TSO session.  When you can fully run the new TSO
*   session adequately, you stop deleting aliases.
*
*   You can use the PDS86 TSO command from CBT File 182 (load module
*   on File 035) to create as many aliases to a program as you want,
*   unrestricted by linkage editor restrictions.  You can even make
*   many thousands of aliases to ECHOPGM in the same library.  You
*   just need enough directory space.  The PDS86 program allows you
*   to expand pds directory space (on the fly) as needed, using its
*   FIXPDS EXPANDDIR(nnn) subcommand.  So you can put ECHOPGM, with
*   many thousands of alias names, into one load library.  You don't
*   need much data space, only directory block space.
* ---------------------------------------------------------------- *
*
*  Program ECHOADF sets RC=12 into register 15, and returns
*  to the caller, which seems useless, but it isn't.
*
*  It just so happens that if a TSO command does this, the TSO
*  terminal monitor program reflects the contents of the command
*  buffer to the terminal.  So if you execute this program as a
*  TSO command, you get its name and its parameters reflected
*  back to the terminal.  This effect only happens if you are in
*  TSO session manager mode (EXEC PGM=ADFMDF03 instead of IKJTSO01).
*
*  IF YOU ARE NOT IN SESSION MANAGER, USE MY OTHER PROGRAMS,
*  ECHOTPUT (USES TPUT TO REFLECT THE COMMAND TO THE TERMINAL), OR
*  ECHOPGM  (USES PUTLINE TO REFLECT THE CONTENTS OF THE COMMAND
*            BUFFER)
*
*    ECHOPGM is better, because its output can be captured more
*    easily, for logging.
*
*  THEREFORE, IF YOU WANT TO NULLIFY A TSO COMMAND, JUST ALIAS ITS
*  NAME TO THIS PROGRAM, AND PUT BOTH NAMES IN A LOAD LIBRARY THAT
*  IS CONCATENATED AHEAD OF SYS1.CMDLIB , FOR INSTANCE YOU CAN PUT
*  THIS PROGRAM INTO A STEPLIB IN THE LOGON PROC, WITH ALL ITS
*  ALIASES.  THEREFORE, IF YOU EXECUTE THE NAME OF THE ALIAS, YOU
*  GET ITS NAME REFLECTED BACK TO THE TSO TERMINAL, AND NO OTHER
*  ACTION OCCURS.
*
*  YOU CAN CREATE A FEW, OR VERY MANY ALIASES TO THIS PROGRAM.
*  JUST USE THE PDS COMMAND PROCESSOR (FROM CBT TAPE FILE 182)
*  MANY TIMES (IN A BATCH PROGRAM IF YOU'D LIKE).  THE COMMANDS ARE:
*
*      PDS 'YOUR.LOAD.LIBRARY'
*      ALIAS ECHOPGM NAME1
*      ALIAS ECHOPGM NAME2
*      ALIAS ECHOPGM NAME3
*      ALIAS ECHOPGM NAME4
*      ALIAS ECHOPGM NAME5
*      END
*
*  WITH THE PDS COMMAND PROCESSOR, YOU CAN CREATE HUNDREDS OR
*  THOUSANDS OF ALIASES TO THIS PROGRAM.  YOU ARE NOT LIMITED BY
*  LINKAGE EDITOR RESTRICTIONS.  YOU CAN EVEN ALIAS THIS PROGRAM
*  TO EVERY NAME IN SYS1.CMDLIB AND IN OTHER LIBRARIES, EXCEPT FOR
*  THOSE NAMES THAT THE (LIMITED) TSO SESSION NEEDS.  TO ALLOW THE
*  USE OF A PROGRAM BY THE TSO SESSION, JUST DELETE THE ALIAS.
*  TO FORBID A COMMAND, JUST MAKE AN ALIAS WITH THE PDS COMMAND
*  AS ABOVE, TO THAT NAME.  CHEAP TSO COMMAND SECURITY.
*
*  I'D BET YOU'D NEVER REALIZED THAT TSO COMMAND SECURITY COULD
*  BE SO SIMPLE TO IMPLEMENT.  SINCE THE COMMANDS ENTERED REFLECT
*  BACK TO THE TERMINAL, YOU CAN EVEN LOG THE RESPONSES, USING
*  THE TSO SESSION MANAGER, AND THE SMCOPY COMMAND.
*------------------------------------------------------------------*
